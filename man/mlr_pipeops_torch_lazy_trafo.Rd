% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpTorchLazyTrafo.R
\name{mlr_pipeops_torch_lazy_trafo}
\alias{mlr_pipeops_torch_lazy_trafo}
\alias{PipeOpTorchLazyTrafo}
\title{Base Class for Lazy Transformations}
\description{
This \code{PipeOp} represents simple preprocessing transformations of torch tensors.
These can be used in two situations:
\enumerate{
\item To preprocess a task, which works analogous to standard preprocessing PipeOps like \code{\link{PipeOpPCA}}.
Because the \code{\link[=lazy_tensor]{lazy_tensor()}} does not make any assumptions on how the data is stored, the transformation is
applied lazily, i.e. when \code{\link[=materialize]{materialize()}} is called.
During trainig of a learner, this transformation will be a applied during data-loading on the CPU.
\item To add a preprocessing step in an \code{\link[=nn_graph]{nn_graph()}} that is being built up in a \code{\link{ModelDescriptor}}.
In this case, the transformation is applied during the forward pass of the model, i.e. the tensor is then
also on the specified device.
}

Currently the \code{PipeOp} must have exactly one inut and one output.
}
\section{Inheriting}{

You need to:
\itemize{
\item Initialize the \code{fn} argument. This function should take one torch tensor as input and return a torch tensor.
Additional parameters that are passed to the function can be specified via the parameter set.
This function needs to be a simple, stateless function, see section \emph{Internals} for more information.
\item In case the transformation changes the tensor shape you must provide a private \code{.shapes_out()} method like
for \code{\link{PipeOpTorch}}.
}
}

\section{Input and Output Channels}{

During \emph{training}, all inputs and outputs are of class \code{\link{Task}} or \code{\link{ModelDescriptor}}.
During \emph{prediction}, all inputs and outputs are of class \code{\link{Task}} or \code{\link{ModelDescriptor}}.
}

\section{State}{

The state is the value calculated by the public method \code{shapes_out()}.
}

\section{Parameters}{

\itemize{
\item \code{augment} :: \code{logical(1)}\cr
This parameter is only present when the \code{PipeOp} does not modify the input shape.
Whether the transformation is applied only during training (\code{TRUE}) or also during prediction (also includes
validation; \code{FALSE}).
This parameter is initalized to \code{FALSE}.
}

Additional parameters can be specified by the class.
}

\section{Internals}{


Applied to a \strong{Task}:

When this PipeOp is used for preprocessing, it creates a \code{\link{PipeOpModule}} from the function \code{fn} (additionally
passing the \code{param_vals} if there are any) and then adds it to the preprocessing graph that is part of the
\code{\link{DataDescriptor}} contained in the \code{\link{lazy_tensor}} column that is being preprocessed.
When the outpuf of this pipeop is then preprocessed by a different \code{PipeOpTorchLazyTrafo} a deep clone of the
preprocessing graph is done. However, this deep clone does not clone the environment of the
function or its attributes in case they have a state (as e.g. in \code{\link[=nn_module]{nn_module()}}s).
When setting the parameter \code{augment} this meanst that the preprcessing

Applied to a \strong{ModelDescriptor}
}

\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3torch:PipeOpTorch]{mlr3torch::PipeOpTorch}} -> \code{PipeOpTorchLazyTrafo}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpTorchLazyTrafo-new}{\code{PipeOpTorchLazyTrafo$new()}}
\item \href{#method-PipeOpTorchLazyTrafo-clone}{\code{PipeOpTorchLazyTrafo$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="help"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-help'><code>mlr3pipelines::PipeOp$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3torch" data-topic="PipeOpTorch" data-id="shapes_out"><a href='../../mlr3torch/html/PipeOpTorch.html#method-PipeOpTorch-shapes_out'><code>mlr3torch::PipeOpTorch$shapes_out()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTorchLazyTrafo-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTorchLazyTrafo-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTorchLazyTrafo$new(
  fn,
  id = "lazy_trafo",
  param_vals = list(),
  param_set = ps(),
  packages = character(0)
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fn}}{(\verb{function()})\cr
A function that will be applied to a (lazy) tensor.
Additional arguments can be passed as parameters.
During actual preprocessing the (lazy) tensor will be passed by position.
The transformation is always applied to a whole batch of tensors, i.e. the first dimension is the batch dimension.}

\item{\code{id}}{(\code{character(1)})\cr
The id for of the new object.}

\item{\code{param_vals}}{(named \code{list()})\cr
Parameter values to be set after construction.}

\item{\code{param_set}}{(\code{paradox::ParamSet})\cr
The parameter set.}

\item{\code{packages}}{(\code{character()})\cr
The packages the function depends on.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTorchLazyTrafo-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTorchLazyTrafo-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTorchLazyTrafo$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
