% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpTaskPreprocTorch.R
\name{pipeop_preproc_torch_class}
\alias{pipeop_preproc_torch_class}
\title{Create Torch Preprocessing PipeOps}
\usage{
pipeop_preproc_torch_class(
  id,
  fn,
  shapes_out = NULL,
  param_set = NULL,
  packages = character(0),
  per_column = TRUE
)
}
\arguments{
\item{id}{(\code{character(1)})\cr
The id for of the new object.}

\item{fn}{(\code{function})\cr
The preprocessing function.}

\item{shapes_out}{(\code{function} or \code{NULL} or \code{TRUE})\cr
The private \code{.shapes_out(shapes_in, param_vals, task)} method of \code{\link{PipeOpTaskPreprocTorch}}.
If \code{NULL}, the pipeop does not change the output shapes.
If \code{TRUE}, the output shape function is inferred and calculates the output shapes as follows:
a) The input shapes are known:
For an input shape of (NA, ...) a meta-tensor of shape (1, ...) is created and the preprocessing function is
applied. Afterwards the batch dimension (1) is replaced with NA and the shape is returned.
b) The input shapes are unknown (all NA):
The dimension is returned as is.}

\item{param_set}{(\code{\link{ParamSet}} or \code{NULL})\cr
The parameter set.
If this is left as \code{NULL} (default) the parameter set is inferred in the following way:
All parameters but the first and \code{...} of \code{fn} are set as untyped parameters with tags 'train' and those that
have nod default value are tagged as 'required' as well.
Default values are not annotated.}

\item{packages}{(\code{character()})\cr
The R packages this object depends on.}

\item{per_column}{(\code{logical(1)})\cr
Whether the preprocessing is applied per-column.}

\item{param_vals}{(named \code{list()})\cr
Parameter values to be set after construction.}
}
\value{
An \code{\link[R6:R6Class]{R6Class}} instance inheriting from \code{\link{PipeOpTaskPreprocTorch}}
}
\description{
Convenience functions to create objects of class \code{\link{PipeOpTaskPreprocTorch}} in a slightly more convenient way.
Start by reading the documentation of \code{\link{PipeOpTaskPreprocTorch}}.
}
\examples{
po_example = pipeop_preproc_torch("preproc_example", function(x, a) x + a)
po_example
po_example$param_set
}
