% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lazy_tensor.R
\name{transform_lazy_tensor}
\alias{transform_lazy_tensor}
\title{Transform Lazy Tensor}
\usage{
transform_lazy_tensor(lt, pipeop, shape)
}
\arguments{
\item{lt}{(\code{\link{lazy_tensor}})\cr
A lazy tensor vector.}

\item{pipeop}{(\code{\link{PipeOpModule}})\cr
The pipeop to be added to the preprocessing graph(s) of the lazy tensor.
Must have one input and one output.}

\item{shape}{(\code{integer()})\cr
The shape of the lazy tensor (without the batch dimension).}
}
\value{
\code{\link{lazy_tensor}}
}
\description{
transform  a \code{\link{lazy_tensor}} vector by appending a preprocessing step.
}
\details{
The following is done:
\enumerate{
\item A shallow copy of the \code{\link{lazy_tensor}}'s preprocessing \code{graph} is created.
\item The provided \code{pipeop} is added to the (shallowly cloned) \code{graph} and connected to the current \code{.pointer} of the
\code{\link{DataDescriptor}}.
\item The \code{.pointer} of the \code{\link{DataDescriptor}} is updated to point to the new output channel of the \code{pipeop}.
\item The \code{.pointer_shape} of the \code{\link{DataDescriptor}} set to the provided \code{shape}.
\item The \code{.hash} of the \code{\link{DataDescriptor}} is updated.
Input must be PipeOpModule with exactly one input and one output
shape must be shape with NA in first dimension
}
}
\examples{
lt = as_lazy_tensor(1:10)
add_five = po("module", module = function(x) x + 5)
lt_plus_five = transform_lazy_tensor(lt, add_five, c(NA, 1))
torch_cat(list(materialize(lt),  materialize(lt_plus_five)), dim = 2)
# graph is cloned
identical(lt$graph, lt_plus_five$graph)
lt$graph$edges
lt_plus_five$graph_edges
# pipeops are not cloned
identical(lt$graph$pipeops[[1]], lt_plus_five$graph[[1]])
}
