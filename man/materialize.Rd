% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/materialize.R
\name{materialize}
\alias{materialize}
\title{Materialize Lazy Tensor Columns}
\usage{
materialize(x, device = "cpu", rbind = FALSE, ...)
}
\arguments{
\item{x}{(any)\cr
The object to materialize.
Either a \code{\link{lazy_tensor}} or a \code{list()} / \code{data.frame()} containing \code{\link{lazy_tensor}} columns.}

\item{rbind}{(\code{logical(1)})\cr
Whether to rbind the lazy tensor columns (\code{TRUE}) or return them as a list of tensors (\code{FALSE}).}
}
\value{
(\code{list()} of \code{\link{lazy_tensor}}s or a \code{\link{lazy_tensor}})
}
\description{
This will materialize a \code{\link[=lazy_tensor]{lazy_tensor()}} or a \code{data.frame()} / \code{list()} containing -- among other things --
\code{\link[=lazy_tensor]{lazy_tensor()}} columns.
I.e. the data described in the underlying \code{\link{DataDescriptors}} is loaded for the indices in the \code{\link[=lazy_tensor]{lazy_tensor()}},
is preprocessed and then put unto the specified device.
Because not all elements in a lazy tensor must have the same shape, a list of tensors is returned by default.
If all elements have the same shape, these tensors can also be rbinded into a single tensor (parameter \code{rbind}).
}
\details{
Materializing a lazy tensor consists of:
\enumerate{
\item Loading the data from the internal dataset of the \code{\link{DataDescriptor}}.
\item Processing these batches in the preprocessing \code{\link{Graph}}s.
\item Returning the result of the \code{\link{PipeOp}} pointed to by the \code{\link{DataDescriptor}} (\code{.pointer}).
}

With multiple \code{\link{lazy_tensor}} columns we can benefit from caching because:
a) Output(s) from the dataset might be input to multiple graphs.
b) Different lazy tensors might be outputs from the same graph.

For this reason it is possible to provide a cache environment.
The hash key for a) is the hash of the indices and the dataset.
The hash key for b) is the hash of the indices, dataset and preprocessing graph.
}
\examples{
lt1 = as_lazy_tensor(torch_randn(10, 3))
materialize(lt1, rbind = TRUE)
materialize(lt1, rbind = FALSE)
lt2 = as_lazy_tensor(torch_randn(10, 4))
d = data.frame(lt1 = lt1, lt2 = lt2)
materialize(d, rbind = TRUE)
materialize(d, rbind = FALSE)
}
